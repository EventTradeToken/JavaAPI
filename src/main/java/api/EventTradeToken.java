package api;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class EventTradeToken extends Contract {
    private static final String BINARY = "6080604052603260035534801561001557600080fd5b50610f24806100256000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d578063313ce5671461012757806334a17d7a1461015257806338a9ab78146101ad5780634b1b9e92146102175780635786fd401461027557806382e02a071461029c57806395d89b411461033f578063ef8b9f0a14610354575b600080fd5b3480156100a957600080fd5b506100b26103ad565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100ec5781810151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013357600080fd5b5061013c6103e4565b6040805160ff9092168252519081900360200190f35b34801561015e57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101ab9436949293602493928401919081908401838280828437509497506103e99650505050505050565b005b3480156101b957600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101ab95833560ff169536956044949193909101919081908401838280828437509497505084359550505060209092013591506105799050565b34801561022357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101ab9436949293602493928401919081908401838280828437509497505050923560ff1693506106a092505050565b34801561028157600080fd5b5061028a6109b2565b60408051918252519081900360200190f35b3480156102a857600080fd5b506102b760ff600435166109b9565b6040805160ff85168152908101829052606060208083018281528551928401929092528451608084019186019080838360005b838110156103025781810151838201526020016102ea565b50505050905090810190601f16801561032f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561034b57600080fd5b506100b2610ac7565b34801561036057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261028a943694929360249392840191908190840183828082843750949750610afe9650505050505050565b60408051808201909152600f81527f4576656e745472616465546f6b656e0000000000000000000000000000000000602082015281565b600281565b6104c36000805480602002602001604051908101604052809291908181526020016000905b828210156104b95760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156104a55780601f1061047a576101008083540402835291602001916104a5565b820191906000526020600020905b81548152906001019060200180831161048857829003601f168201915b50505050508152602001906001019061040e565b5050505082610c50565b156104cd57600080fd5b6000805460018101808355918052825161050e917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301906020850190610e60565b50506003546002826040518082805190602001908083835b602083106105455780518252601f199092019160209182019101610526565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092909255505050565b60018054906000808311156105d3575060005b828160ff1610156105d3576001805460ff83169081106105a857fe5b600091825260209091206004909102015460ff888116911614156105cb57600091505b60010161058c565b8115610697576040805160808101825260ff898116825260208083018a8152938301899052606083018890526001805480820180835560009290925284517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf66004909202918201805460ff19169190951617845594518051919561067e937fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf790910192910190610e60565b5060408201518160020155606082015181600301555050505b50505050505050565b600061077c6000805480602002602001604051908101604052809291908181526020016000905b828210156107725760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561075e5780601f106107335761010080835404028352916020019161075e565b820191906000526020600020905b81548152906001019060200180831161074157829003601f168201915b5050505050815260200190600101906106c7565b5050505084610c50565b151561078757600080fd5b61079082610d69565b9050600060ff821610156107a357600080fd5b6001805460ff83169081106107b457fe5b9060005260206000209060040201600201546002846040518082805190602001908083835b602083106107f85780518252601f1990920191602091820191016107d9565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205492909210159150610836905057600080fd5b600060018260ff1681548110151561084a57fe5b90600052602060002090600402016003015411151561086857600080fd5b61089660018260ff1681548110151561087d57fe5b9060005260206000209060040201600301546001610de2565b6001805460ff84169081106108a757fe5b90600052602060002090600402016003018190555061094a6002846040518082805190602001908083835b602083106108f15780518252601f1990920191602091820191016108d2565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460018054919350915060ff851690811061093357fe5b906000526020600020906004020160020154610de2565b6002846040518082805190602001908083835b6020831061097c5780518252601f19909201916020918201910161095d565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220929092555050505050565b6001545b90565b60006060600060018460ff168154811015156109d157fe5b60009182526020909120600490910201546001805460ff9283169287169081106109f757fe5b906000526020600020906004020160010160018660ff16815481101515610a1a57fe5b60009182526020918290206002600490920201810154835460408051601f600019610100600186161502019093169490940491820185900485028401850190528083529092849190830182828015610ab35780601f10610a8857610100808354040283529160200191610ab3565b820191906000526020600020905b815481529060010190602001808311610a9657829003601f168201915b505050505091509250925092509193909250565b60408051808201909152600381527f4554540000000000000000000000000000000000000000000000000000000000602082015281565b6000610bda6000805480602002602001604051908101604052809291908181526020016000905b82821015610bd05760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610bbc5780601f10610b9157610100808354040283529160200191610bbc565b820191906000526020600020905b815481529060010190602001808311610b9f57829003601f168201915b505050505081526020019060010190610b25565b5050505083610c50565b15610c47576002826040518082805190602001908083835b60208310610c115780518252601f199092019160209182019101610bf2565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220549250610c4b915050565b5060005b919050565b600080600084511115610d5d575060005b83518160ff161015610d5d57826040518082805190602001908083835b60208310610c9d5780518252601f199092019160209182019101610c7e565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120875190935087925060ff851691508110610cdc57fe5b906020019060200201516040518082805190602001908083835b60208310610d155780518252601f199092019160209182019101610cf6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610d555760019150610d62565b600101610c61565b600091505b5092915050565b600080610d7583610df4565b1515610d8057600080fd5b60015460001015610ddc575060005b60015460ff82161015610ddc578260ff1660018260ff16815481101515610db257fe5b600091825260209091206004909102015460ff161415610dd457809150610ddc565b600101610d8f565b50919050565b600082821115610dee57fe5b50900390565b60008060006001805490501115610e57575060005b60015460ff82161015610e57578260ff1660018260ff16815481101515610e2c57fe5b600091825260209091206004909102015460ff161415610e4f5760019150610ddc565b600101610e09565b50600092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ea157805160ff1916838001178555610ece565b82800160010185558215610ece579182015b82811115610ece578251825591602001919060010190610eb3565b50610eda929150610ede565b5090565b6109b691905b80821115610eda5760008155600101610ee45600a165627a7a723058209f11cc132ddf13deff6dc49ef58fd9fe4911415e2de70f4401e147f0f8f4ffb80029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_NEWCLIENT = "newClient";

    public static final String FUNC_ADDPRODUCT = "addProduct";

    public static final String FUNC_BUYPRODUCT = "buyProduct";

    public static final String FUNC_GETPRODUCTSCOUNT = "getProductsCount";

    public static final String FUNC_GETPRODUCTBYINDEX = "getProductByIndex";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_GETCLIENTBALANCE = "getClientBalance";

    protected EventTradeToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected EventTradeToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> newClient(String _client) {
        final Function function = new Function(
                FUNC_NEWCLIENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_client)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addProduct(BigInteger _code, String _name, BigInteger _price, BigInteger _count) {
        final Function function = new Function(
                FUNC_ADDPRODUCT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_code), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_price), 
                new org.web3j.abi.datatypes.generated.Uint256(_count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buyProduct(String _client, BigInteger _code) {
        final Function function = new Function(
                FUNC_BUYPRODUCT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_client), 
                new org.web3j.abi.datatypes.generated.Uint8(_code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getProductsCount() {
        final Function function = new Function(FUNC_GETPRODUCTSCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, String, BigInteger>> getProductByIndex(BigInteger num) {
        final Function function = new Function(FUNC_GETPRODUCTBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, BigInteger>>(
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getClientBalance(String _client) {
        final Function function = new Function(FUNC_GETCLIENTBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_client)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<EventTradeToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EventTradeToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<EventTradeToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EventTradeToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static EventTradeToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new EventTradeToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static EventTradeToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new EventTradeToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
